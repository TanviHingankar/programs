Que.1.

public class ReverseNumber {
    public static void main(String[] args) {
        int number = 1234;
        int reversedNumber = reverseNumber(number);
        System.out.println("Original number: " + number);
        System.out.println("Reversed number: " + reversedNumber);
    }

    public static int reverseNumber(int number) {
        int reversedNumber = 0;
        while (number != 0) {
            int digit = number % 10;
            reversedNumber = reversedNumber * 10 + digit;
            number /= 10;
        }
        return reversedNumber;
    }
}

Input : 1234

Output : 4321


Que.2.

public class FibonacciSeries {
    public static void main(String[] args) {
        int n = 10; // Change n to generate Fibonacci series up to nth term
        System.out.println("Fibonacci series up to " + n + " terms:");
        printFibonacciSeries(n);
    }

    public static void printFibonacciSeries(int n) {
        int firstTerm = 0, secondTerm = 1;
        for (int i = 0; i < n; i++) {
            System.out.print(firstTerm + " ");
            int nextTerm = firstTerm + secondTerm;
            firstTerm = secondTerm;
            secondTerm = nextTerm;
        }
    }
}

Input : 10

Output : Fibonacci series up to 10 terms :
0 1 1 2 3 5 8 13 21 34

Que.3.

public class PalindromeCheck {
    public static void main(String[] args) {
        int number = 12321; // Change the number to check for palindrome
        if (isPalindrome(number)) {
            System.out.println(number + " is a palindrome.");
        } else {
            System.out.println(number + " is not a palindrome.");
        }
    }

    public static boolean isPalindrome(int number) {
        int originalNumber = number;
        int reversedNumber = 0;
        while (number != 0) {
            int digit = number % 10;
            reversedNumber = reversedNumber * 10 + digit;
            number /= 10;
        }
        return originalNumber == reversedNumber;
    }
}

Output : 12321 is a palindrome.

Que.4.

import java.util.Arrays;

public class SortHalfArray {
    public static void main(String[] args) {
        int[] array = {5, 10, 3, 7, 8, 4}; // Example array
        sortHalfArray(array);
        System.out.println("Sorted half array: " + Arrays.toString(array));
    }

    public static void sortHalfArray(int[] array) {
        int length = array.length;
        int mid = length / 2;

        // Sort first half in ascending order
        Arrays.sort(array, 0, mid);

        // Sort second half in descending order
        for (int i = mid, j = length - 1; i < j; i++, j--) {
            int temp = array[i];
            array[i] = array[j];
            array[j] = temp;
        }
    }
}

Output : Sorted half array: [3, 5, 10, 4, 8, 7]

Que.5.

import java.util.Arrays;

public class ReverseArray {
    public static void main(String[] args) {
        int[] originalArray = {5, 10, 3, 7, 8, 4}; // Example array
        System.out.println("Original array: " + Arrays.toString(originalArray));
        
        reverseArray(originalArray);
        
        System.out.println("Reversed array: " + Arrays.toString(originalArray));
    }

    public static void reverseArray(int[] array) {
        int left = 0;
        int right = array.length - 1;

        while (left < right) {
            // Swap elements at left and right indices
            int temp = array[left];
            array[left] = array[right];
            array[right] = temp;

            // Move left index to the right
            left++;

            // Move right index to the left
            right--;
        }
    }
}

Original array: [5, 10, 3, 7, 8, 4]
Reversed array: [4, 8, 7, 3, 10, 5]

Que.8.
public class CountEvenOdd {
    public static void main(String[] args) {
        int[] array = {2, 5, 7, 2, 4, 7, 8, 9, 4, 1, 3, 6, 9}; // Example array
        
        int[] counts = countEvenOdd(array);
        
        System.out.println("Number of even integers: " + counts[0]);
        System.out.println("Number of odd integers: " + counts[1]);
    }

    public static int[] countEvenOdd(int[] array) {
        int[] counts = new int[2]; // Index 0 for even count, index 1 for odd count

        for (int num : array) {
            if (num % 2 == 0) {
                counts[0]++; // Increment even count
            } else {
                counts[1]++; // Increment odd count
            }
        }

        return counts;
    }
}

Output :Number of even integers: 6
             Number of odd integers : 7

Que.9.

public class FindMissingNumber {
    public static void main(String[] args) {
        int[] array = {1, 2, 4, 5, 6}; // Example array with one missing number
        int n = 6; // Expected maximum value in the array (inclusive)
        
        int missingNumber = findMissingNumber(array, n);
        
        System.out.println("The missing number is: " + missingNumber);
    }

    public static int findMissingNumber(int[] array, int n) {
        // Calculate the sum of all numbers up to n
        int totalSum = n * (n + 1) / 2;
        
        // Calculate the sum of elements in the array
        int arraySum = 0;
        for (int num : array) {
            arraySum += num;
        }
        
        // The missing number is the difference between the total sum and the array sum
        return totalSum - arraySum;
    }
}

Output : The missing number is : 3

Que.11.

public class RemoveNonAlphabetic {
    public static void main(String[] args) {
        String originalString = "Hello123 World!"; // Example string
        String resultString = removeNonAlphabetic(originalString);
        System.out.println("Original string: " + originalString);
        System.out.println("String with only alphabetic characters: " + resultString);
    }

    public static String removeNonAlphabetic(String str) {
        StringBuilder result = new StringBuilder();

        for (char ch : str.toCharArray()) {
            // Append only alphabetic characters
            if (Character.isLetter(ch)) {
                result.append(ch);
            }
        }

        return result.toString();
    }
}

Output : 
Original string: Hello123 World!
String with only alphabetic characters: HelloWorld




